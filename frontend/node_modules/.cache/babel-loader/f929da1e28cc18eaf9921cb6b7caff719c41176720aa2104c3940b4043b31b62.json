{"ast":null,"code":"var _jsxFileName = \"/home/excalibur/Documents/Jaagr/Bhaav/frontend/src/components/Storytelling.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Storytelling = () => {\n  _s();\n  const {\n    emotionId\n  } = useParams();\n  const [emotion, setEmotion] = useState(null);\n  const [quizAnswer, setQuizAnswer] = useState('');\n  const [feedback, setFeedback] = useState(null);\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/emotions/${emotionId}`).then(response => response.json()).then(data => setEmotion(data)).catch(error => console.error('Error fetching emotion:', error));\n  }, [emotionId]);\n  const submitQuiz = () => {\n    // For demonstration, assume the correct answer is \"yes\" for every story.\n    fetch('http://localhost:5000/api/story-quiz', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        answer: quizAnswer.toLowerCase(),\n        correctAnswer: 'yes'\n      })\n    }).then(response => response.json()).then(data => setFeedback(data.isCorrect ? \"Great job!\" : \"Let's try again!\")).catch(error => console.error('Error submitting story quiz:', error));\n  };\n  if (!emotion) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: emotion.story.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: emotion.story.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Did you understand the coping mechanism? (Answer with \\\"yes\\\")\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: quizAnswer,\n      onChange: e => setQuizAnswer(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitQuiz,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Storytelling, \"f0G5VI+XJXj5A9JckeXI9bCt6d4=\", false, function () {\n  return [useParams];\n});\n_c = Storytelling;\nexport default Storytelling;\nvar _c;\n$RefreshReg$(_c, \"Storytelling\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Storytelling","_s","emotionId","emotion","setEmotion","quizAnswer","setQuizAnswer","feedback","setFeedback","fetch","then","response","json","data","catch","error","console","submitQuiz","method","headers","body","JSON","stringify","answer","toLowerCase","correctAnswer","isCorrect","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","story","title","content","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/excalibur/Documents/Jaagr/Bhaav/frontend/src/components/Storytelling.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Storytelling = () => {\n  const { emotionId } = useParams();\n  const [emotion, setEmotion] = useState(null);\n  const [quizAnswer, setQuizAnswer] = useState('');\n  const [feedback, setFeedback] = useState(null);\n\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/emotions/${emotionId}`)\n      .then(response => response.json())\n      .then(data => setEmotion(data))\n      .catch(error => console.error('Error fetching emotion:', error));\n  }, [emotionId]);\n\n  const submitQuiz = () => {\n    // For demonstration, assume the correct answer is \"yes\" for every story.\n    fetch('http://localhost:5000/api/story-quiz', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        answer: quizAnswer.toLowerCase(),\n        correctAnswer: 'yes'\n      })\n    })\n      .then(response => response.json())\n      .then(data => setFeedback(data.isCorrect ? \"Great job!\" : \"Let's try again!\"))\n      .catch(error => console.error('Error submitting story quiz:', error));\n  };\n\n  if (!emotion) return <div>Loading...</div>;\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>{emotion.story.title}</h1>\n      <p>{emotion.story.content}</p>\n      <p>Did you understand the coping mechanism? (Answer with \"yes\")</p>\n      <input\n        type=\"text\"\n        value={quizAnswer}\n        onChange={(e) => setQuizAnswer(e.target.value)}\n      />\n      <button onClick={submitQuiz}>Submit</button>\n      {feedback && <p>{feedback}</p>}\n    </div>\n  );\n};\n\nexport default Storytelling;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAU,CAAC,GAAGL,SAAS,CAAC,CAAC;EACjC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,sCAAsCP,SAAS,EAAE,CAAC,CACrDQ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIT,UAAU,CAACS,IAAI,CAAC,CAAC,CAC9BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC;EACpE,CAAC,EAAE,CAACb,SAAS,CAAC,CAAC;EAEf,MAAMe,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAR,KAAK,CAAC,sCAAsC,EAAE;MAC5CS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,MAAM,EAAElB,UAAU,CAACmB,WAAW,CAAC,CAAC;QAChCC,aAAa,EAAE;MACjB,CAAC;IACH,CAAC,CAAC,CACCf,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,WAAW,CAACK,IAAI,CAACa,SAAS,GAAG,YAAY,GAAG,kBAAkB,CAAC,CAAC,CAC7EZ,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;EACzE,CAAC;EAED,IAAI,CAACZ,OAAO,EAAE,oBAAOJ,OAAA;IAAA4B,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE1C,oBACEhC,OAAA;IAAKiC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAN,QAAA,gBAC9B5B,OAAA;MAAA4B,QAAA,EAAKxB,OAAO,CAAC+B,KAAK,CAACC;IAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC9BhC,OAAA;MAAA4B,QAAA,EAAIxB,OAAO,CAAC+B,KAAK,CAACE;IAAO;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BhC,OAAA;MAAA4B,QAAA,EAAG;IAA4D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACnEhC,OAAA;MACEsC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEjC,UAAW;MAClBkC,QAAQ,EAAGC,CAAC,IAAKlC,aAAa,CAACkC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACFhC,OAAA;MAAQ2C,OAAO,EAAEzB,UAAW;MAAAU,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC3CxB,QAAQ,iBAAIR,OAAA;MAAA4B,QAAA,EAAIpB;IAAQ;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA5CID,YAAY;EAAA,QACMH,SAAS;AAAA;AAAA8C,EAAA,GAD3B3C,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}