{"ast":null,"code":"var _jsxFileName = \"/home/excalibur/Documents/Jaagr/Bhaav/frontend/src/components/EmotionTest.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmotionTest = () => {\n  _s();\n  const {\n    emotionId\n  } = useParams();\n  const [emotion, setEmotion] = useState(null);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [feedback, setFeedback] = useState(null);\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/emotions/${emotionId}`).then(response => response.json()).then(data => setEmotion(data)).catch(error => console.error('Error fetching emotion:', error));\n  }, [emotionId]);\n  const handleOptionSelect = optionId => {\n    setSelectedOption(optionId);\n  };\n  const submitAnswer = () => {\n    // For simplicity, the correct answer is assumed to be the emotion's id.\n    fetch('http://localhost:5000/api/emotion-test', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        selectedEmotionId: selectedOption,\n        correctEmotionId: emotion.id\n      })\n    }).then(response => response.json()).then(data => setFeedback(data.isCorrect ? \"Correct!\" : \"Try again!\")).catch(error => console.error('Error submitting test:', error));\n  };\n  if (!emotion) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 24\n  }, this);\n\n  // For demo purposes, a fixed set of multiple-choice options is used.\n  const options = [{\n    id: 1,\n    name: 'Happy'\n  }, {\n    id: 2,\n    name: 'Sad'\n  }, {\n    id: 3,\n    name: 'Angry'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Emotion Recognition Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: emotion.image,\n      alt: emotion.name,\n      style: {\n        width: '200px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Which emotion does this image represent?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleOptionSelect(option.id),\n        style: {\n          marginRight: '10px',\n          padding: '10px',\n          backgroundColor: selectedOption === option.id ? '#ddd' : '#fff'\n        },\n        children: option.name\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitAnswer,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(EmotionTest, \"yovS9Wt0iarbYVCJpZTjYI/tX8U=\", false, function () {\n  return [useParams];\n});\n_c = EmotionTest;\nexport default EmotionTest;\nvar _c;\n$RefreshReg$(_c, \"EmotionTest\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","EmotionTest","_s","emotionId","emotion","setEmotion","selectedOption","setSelectedOption","feedback","setFeedback","fetch","then","response","json","data","catch","error","console","handleOptionSelect","optionId","submitAnswer","method","headers","body","JSON","stringify","selectedEmotionId","correctEmotionId","id","isCorrect","children","fileName","_jsxFileName","lineNumber","columnNumber","options","name","style","padding","src","image","alt","width","map","option","onClick","marginRight","backgroundColor","_c","$RefreshReg$"],"sources":["/home/excalibur/Documents/Jaagr/Bhaav/frontend/src/components/EmotionTest.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst EmotionTest = () => {\n  const { emotionId } = useParams();\n  const [emotion, setEmotion] = useState(null);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [feedback, setFeedback] = useState(null);\n\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/emotions/${emotionId}`)\n      .then(response => response.json())\n      .then(data => setEmotion(data))\n      .catch(error => console.error('Error fetching emotion:', error));\n  }, [emotionId]);\n\n  const handleOptionSelect = (optionId) => {\n    setSelectedOption(optionId);\n  };\n\n  const submitAnswer = () => {\n    // For simplicity, the correct answer is assumed to be the emotion's id.\n    fetch('http://localhost:5000/api/emotion-test', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        selectedEmotionId: selectedOption,\n        correctEmotionId: emotion.id\n      })\n    })\n      .then(response => response.json())\n      .then(data => setFeedback(data.isCorrect ? \"Correct!\" : \"Try again!\"))\n      .catch(error => console.error('Error submitting test:', error));\n  };\n\n  if (!emotion) return <div>Loading...</div>;\n\n  // For demo purposes, a fixed set of multiple-choice options is used.\n  const options = [\n    { id: 1, name: 'Happy' },\n    { id: 2, name: 'Sad' },\n    { id: 3, name: 'Angry' }\n  ];\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Emotion Recognition Test</h1>\n      <img src={emotion.image} alt={emotion.name} style={{ width: '200px' }} />\n      <p>Which emotion does this image represent?</p>\n      <div>\n        {options.map(option => (\n          <button\n            key={option.id}\n            onClick={() => handleOptionSelect(option.id)}\n            style={{\n              marginRight: '10px',\n              padding: '10px',\n              backgroundColor: selectedOption === option.id ? '#ddd' : '#fff'\n            }}\n          >\n            {option.name}\n          </button>\n        ))}\n      </div>\n      <br />\n      <button onClick={submitAnswer}>Submit Answer</button>\n      {feedback && <p>{feedback}</p>}\n    </div>\n  );\n};\n\nexport default EmotionTest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}